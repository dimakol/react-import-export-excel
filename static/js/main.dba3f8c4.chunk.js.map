{"version":3,"sources":["components/Header/Header.js","components/Table/MyTable.js","components/Excel/ExportExcel.js","components/Excel/ImportExcel.js","utils/customers.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","MyTable","_ref","data","headers","body","slice","tableHeader","map","title","index","key","tableBody","row","value","TableRow","Table_default","striped","bordered","hover","ExportExcel","fileName","fileType","Button_default","variant","size","onClick","e","workBook","Sheets","XLSX","aoa_to_sheet","SheetNames","exportToExcel","EXTENSIONS","SheetJSFT","format","join","ImportExcel","setFileName","setTableData","fileInput","useRef","getFileExtension","file","parts","name","split","extension","length","includes","importFromExcel","fileReader","FileReader","readAsArrayBuffer","onload","event","bufferArray","target","result","type","workSheetName","workSheet","sheet_to_json","header","getFileName","Fragment","current","click","ref","hidden","multiple","accept","onChange","files","alert","FILE_NAME","FILE_TYPE","makeCustomersData","customers","i","push","concat","unshift","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","changeFileType","tableData","state","Header_Header","ExportExcel_ExportExcel","ImportExcel_ImportExcel","MyTable_MyTable","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dba3f8c4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>React Import/Export From/To Excel Example</h1>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nexport const MyTable = ({ data }) => {\r\n  const headers = data[0];\r\n  const body = data.slice(1);\r\n\r\n  const TableRow = (row, index) => {\r\n    return (\r\n      <tr key={index} className=\"even\">\r\n        <td> {index + 1} </td>\r\n        {row.map((value, index) => (\r\n          <td key={index}>{value}</td>\r\n        ))}\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  const tableHeader = (\r\n    <tr>\r\n      <th>#</th>\r\n      {headers.map((title, index) => (\r\n        <th key={index}>{title}</th>\r\n      ))}\r\n    </tr>\r\n  );\r\n\r\n  const tableBody = body.map((row, index) => TableRow(row, index));\r\n\r\n  return (\r\n    <Table striped bordered hover>\r\n      <thead className=\"bgvi\">{tableHeader}</thead>\r\n      <tbody>{tableBody}</tbody>\r\n    </Table>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nexport const ExportExcel = ({ data, fileName, fileType }) => {\r\n  const exportToExcel = (data, fileName, fileType) => {\r\n    const workSheet = XLSX.utils.aoa_to_sheet(data);\r\n    const workBook = { Sheets: { data: workSheet }, SheetNames: [\"data\"] };\r\n    // Download\r\n    XLSX.writeFile(workBook, fileName + \".\" + fileType);\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      className=\"border border-secondary\"\r\n      variant=\"warning\"\r\n      size=\"sm\"\r\n      onClick={(e) => exportToExcel(data, fileName, fileType)}\r\n    >\r\n      Export to file\r\n    </Button>\r\n  );\r\n};\r\n","import React, { useRef } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\n// accepted files format for import\r\nconst EXTENSIONS = [\"xlsx\", \"xls\", \"csv\"];\r\nconst SheetJSFT = EXTENSIONS.map((format) => {\r\n  return \".\" + format;\r\n}).join(\",\");\r\n\r\nexport const ImportExcel = ({ setFileName, setTableData }) => {\r\n  const fileInput = useRef(null);\r\n\r\n  // file input selection\r\n  const handleChange = (event) => {\r\n    const files = event.target.files;\r\n    // file selected\r\n    if (files && files[0]) {\r\n      if (getFileExtension(files[0])) {\r\n        importFromExcel(files[0]);\r\n      } else {\r\n        alert(\"Invalid file input, Select Excel, CSV file\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // return the file name\r\n  const getFileName = (file) => {\r\n    const parts = file.name.split(\".\");\r\n    const fileName = parts[0];\r\n    return fileName;\r\n  };\r\n\r\n  // return true if the file with supported extension\r\n  const getFileExtension = (file) => {\r\n    const parts = file.name.split(\".\");\r\n    const extension = parts[parts.length - 1];\r\n    return EXTENSIONS.includes(extension);\r\n  };\r\n\r\n  const importFromExcel = (file) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.readAsArrayBuffer(file);\r\n\r\n    fileReader.onload = (event) => {\r\n      // parse data\r\n      const bufferArray = event.target.result;\r\n      const workBook = XLSX.read(bufferArray, { type: \"array\" });\r\n\r\n      // get first sheet\r\n      const workSheetName = workBook.SheetNames[0];\r\n      const workSheet = workBook.Sheets[workSheetName];\r\n      // convert to array\r\n      const data = XLSX.utils.sheet_to_json(workSheet, { header: 1 });\r\n      setFileName(getFileName(file));\r\n      setTableData(data);\r\n    };\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <p>\r\n        <Button\r\n          className=\"border border-secondary mr-1\"\r\n          variant=\"warning\"\r\n          size=\"sm\"\r\n          onClick={() => fileInput.current.click()}\r\n        >\r\n          import from file\r\n        </Button>\r\n        Only csv, xlsx and xls files are supported.\r\n      </p>\r\n\r\n      <input\r\n        ref={fileInput}\r\n        type=\"file\"\r\n        hidden\r\n        multiple={false}\r\n        accept={SheetJSFT}\r\n        onChange={handleChange}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n","export const FILE_NAME = \"Customers\";\r\nexport const FILE_TYPE = \"csv\";\r\n\r\n// make customers dummy data\r\nexport const makeCustomersData = () => {\r\n  const customers = [];\r\n  const headers = [\"firstName\", \"lastName\", \"email\", \"address\", \"zipcode\"];\r\n  for (let i = 0; i <= 25; i++) {\r\n    customers.push([\r\n      `first${i}`,\r\n      `last${i}`,\r\n      `abc${i}@gmail.com`,\r\n      `000${i} street city, ST`,\r\n      `0000${i}`,\r\n    ]);\r\n  }\r\n  customers.unshift(headers);\r\n  return customers;\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n// Import components\r\nimport { Header } from \"./components/Header/Header\";\r\nimport { MyTable } from \"./components/Table/MyTable\";\r\nimport { ExportExcel } from \"./components/Excel/ExportExcel\";\r\nimport { ImportExcel } from \"./components/Excel/ImportExcel\";\r\n// Import utils\r\nimport { FILE_NAME, FILE_TYPE, makeCustomersData } from \"./utils/customers\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      tableData: makeCustomersData(),\r\n      fileName: FILE_NAME,\r\n      fileType: FILE_TYPE,\r\n    };\r\n  }\r\n\r\n  setFileName = (fileName) => {\r\n    this.setState({ fileName });\r\n  };\r\n\r\n  changeFileType = (event) => {\r\n    const fileType = event.target.value;\r\n    this.setState({ fileType });\r\n  };\r\n\r\n  setTableData = (tableData) => {\r\n    this.setState({ tableData });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <div className=\"row\">\r\n          <div className=\"col-md-8\">\r\n            <h2>{this.state.fileName}</h2>\r\n          </div>\r\n          <form>\r\n            <div>\r\n              <span className=\"mr\">File type:</span>\r\n              <select\r\n                name=\"fileType\"\r\n                onChange={this.changeFileType}\r\n                value={this.state.fileType}\r\n                className=\"mr\"\r\n              >\r\n                <option value=\"csv\">CSV</option>\r\n                <option value=\"xlsx\">XLSX</option>\r\n              </select>\r\n              <ExportExcel\r\n                data={this.state.tableData}\r\n                fileName={this.state.fileName}\r\n                fileType={this.state.fileType}\r\n              />\r\n            </div>\r\n            <div className=\"mb-2\">\r\n              <ImportExcel\r\n                setFileName={this.setFileName}\r\n                setTableData={this.setTableData}\r\n              ></ImportExcel>\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <MyTable data={this.state.tableData} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}